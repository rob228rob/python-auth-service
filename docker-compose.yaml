services:
  app:
    build:
      context: .
      dockerfile: docker/Dockerfile.app
    container_name: fastapi_app
    ports:
      - "8000:8000"
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    env_file:
      - app/.env

  telegram_notifier:
    build:
      context: .
      dockerfile: docker/Dockerfile.notifier
    container_name: telegram_notifier
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - tg_notifier/.env

  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092" ]
      interval: 7s
      timeout: 5s
      retries: 3

  db:
    image: postgres:16-alpine3.21
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-mydatabase}
      POSTGRES_USER: ${POSTGRES_USER:-myuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mypassword}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-myuser} -d ${POSTGRES_DB:-mydatabase}"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
